AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  manage-schedules-with-stepfunctions

  Sample SAM Template for manage-schedules-with-stepfunctions

Globals:
  Function:
    Timeout: 3
    MemorySize: 128

Resources:
  ScheduleTargetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/
      Handler: app.lambda_handler
      Runtime: python3.9
      EventInvokeConfig:
        MaximumRetryAttempts: 0
      Architectures:
        - x86_64
      Policies:
        - Version: 2012-10-17
          Statement:
            - Sid: SendTaskSuccessFailure
              Effect: Allow
              Action:
                - states:SendTaskSuccess
                - states:SendTaskFailure
              Resource: '*'

  ScheduleGroup:
    Type: AWS::Scheduler::ScheduleGroup
    Properties:
      Name: 'MySchedulesGroup'

  ScheduleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - scheduler.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: SendTaskSuccessFailure
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: InvokeLambdaFunction
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt ScheduleTargetFunction.Arn

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: 'ScheduleResultTopic'


#  StepFunctionRole:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: 2012-10-17
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service:
#                - states.amazonaws.com
#            Action:
#              - sts:AssumeRole
#
#      Policies:
#        - PolicyName: SendTaskSuccessFailure
#          PolicyDocument:
#            Version: 2012-10-17
#            Statement:
#              - Sid: InvokeLambdaFunction
#                Effect: Allow
#                Action:
#                  - lambda:InvokeFunction
#                Resource:
#                  - !GetAtt ScheduleTargetFunction.Arn

  ManageSchedulesStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: 'ManageSchedulesStateMachine'
      DefinitionUri: state_machine/manage_schedules.asl.json
      DefinitionSubstitutions:
        TargetArn: !GetAtt ScheduleTargetFunction.Arn
        RoleArn: !GetAtt ScheduleRole.Arn
        ScheduleGroup: !Ref ScheduleGroup
        SnsTopicArn: !Ref SNSTopic
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt SNSTopic.TopicName
        - Version: 2012-10-17
          Statement:
            - Sid: PassSchedulerRole
              Effect: Allow
              Action:
                - iam:PassRole
              Resource:
                - !GetAtt ScheduleRole.Arn
            - Sid: CreateAndDeleteSchedule
              Effect: Allow
              Action:
                - scheduler:CreateSchedule
                - scheduler:DeleteSchedule
              Resource:
                - !Sub
                  - "arn:aws:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/${scheduleGroup}/*"
                  - scheduleGroup: !Ref ScheduleGroup

Outputs:
  ScheduleTargetFunction:
    Description: "Schedule Target Function Arn"
    Value: !GetAtt ScheduleTargetFunction.Arn
  ScheduleGroupArn:
    Description: "Schedule Group Arn"
    Value: !GetAtt ScheduleGroup.Arn